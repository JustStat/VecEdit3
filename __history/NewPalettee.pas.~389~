unit NewPalettee;

interface

uses Windows, SysUtils, Classes, Graphics, shapes,scale;

type
  TFPalette = class
  private
    Rects: TFShapeList;
    CanvasOut: TCanvas;
  public
    IHeigth: Integer;
    PalColors: Array of TColor;
    Zoomer: TZoomer;
    function Select(Index: Integer): TColor;
    function GetIndex(X, Y: Integer): Integer;
    procedure AddColor(Color: TColor);
    procedure Draw;
    constructor Create(Canvas: TCanvas; sIHeigth: Integer);
  end;

implementation

constructor TFPalette.Create(Canvas: TCanvas; sIHeigth: Integer);

const
  ColorsCount = 20;

var
  i: Integer;
  Tmp, Step: TColor;
begin
  IHeigth := sIHeigth;
  CanvasOut := Canvas;
  Tmp := $FFFFFF;
  Step := $000001;
  Zoomer := TZoomer.Create;
  Rects := TFShapeList.Create(Zoomer);
  for i := 1 to ColorsCount do
  begin
    AddColor(Tmp);
    Tmp := Tmp + Step;
  end;
end;

procedure TFPalette.Draw;
var
  i: Integer;
begin
  for i := 0 to High(PalColors) do
  begin
  Rects.Items[i].BrushF.Color := PalColors[i];
  Rects.Items[i].DrawIt := true;
  end;
  Rects.DrawAll(CanvasOut);
end;

procedure TFPalette.AddColor(Color: TColor);
var
  X1, X2, Y1, Y2: Integer;
  NewRect: TRectangle;
begin
  SetLength(PalColors, length(PalColors) + 1);
  PalColors[ High(PalColors)] := Color;
  NewRect := TRectangle.Create(Zoomer);
  NewRect.BrushF.Style := bsSolid;
  Y1 := 1;
  X1 := (length(PalColors) div 2) * IHeigth + 1;
  if ((length(PalColors) mod 2) = 0) then
  begin
    if length(PalColors) > 1 then
      Dec(X1, IHeigth);
    if length(PalColors) > 0 then
      Y1 := IHeigth + 1;
  end;
  X2 := X1 + IHeigth - 1;
  Y2 := Y1 + IHeigth - 1;
  with NewRect do
  begin
    SetLength(Points, Length(Points) + 1);
    Points[0] := Zoomer.Scrn2Wrld(X1, Y1);
    SetLength(Points, Length(Points) + 1);
    Points[1] := Zoomer.Scrn2Wrld(X2, Y2);
    BrushF.Color := Color;
    PenF.Style := psSolid;
    Draw(CanvasOut);
  end;
  Rects.Add(NewRect);
end;

function TFPalette.GetIndex(X, Y: Integer): Integer;
begin
  Result := ((X + Abs(Trunc(Rects.Items[0].Points[0].X)) - 1) div IHeigth) * 2
   + (Y div IHeigth);
end;

function TFPalette.Select(Index: Integer): TColor;
begin
  Result := $0;
  if Index > High(PalColors) then
    exit;
  Result := PalColors[Index];
  Draw;
end;

end.
